[{"path":"/articles/Package-Tutorial.html","id":"multigroup-analysis","dir":"Articles","previous_headings":"","what":"Multigroup analysis","title":"visualizemi Tutorial","text":"interested measurement invariance, likely want conduct multigroup factor analysis (MGCFA) compare two groups proposed model structure. generally consists steps models increasing restrictions groups constrain parameters equal across groups. Invariance achieved showing two groups equal values model, non-invariance occurs show values. Check excellent book chapters Brown (2015) Kline (2016) learn theoretical backgrounds ideas behind MGCFA. R, MGCFA can achieved using lavaan - structural equation modeling package covers large range possible modeling options (Rosseel 2012). tutorial multigroups can found : https://lavaan.ugent./tutorial/groups.html. visualizemi includes MGCFA convenience function flexibly calculates following: overall model without groups Individual group based models “configural” model wherein groups put together one model constraints User entered constraint based models Additionally, function returns list coefficients fit statistics comparison using favorite rules determining measurement invariance. outputs get long, ’s summary ’s available - models full lavaan model structure, can use summary(), parameterEstimates(), fitmeasures(), . commented save space tutorial.","code":"HS.model <- ' visual  =~ x1 + x2 + x3               textual =~ x4 + x5 + x6               speed   =~ x7 + x8 + x9 '                      # cfa model saved_mgcfa <- mgcfa(model = HS.model,                      # dataset in data frame                       data = HolzingerSwineford1939,                       # grouping variable column                       group = \"sex\",                      # lavaan syntax for group constraints                      group.equal = c(\"loadings\", \"intercepts\", \"residuals\"),                       # any other lavaan cfa arguments                      meanstructure = TRUE)  # note you can also include sample.nobs, sample.cov, and sample.mean if  # you only have the correlation or covariance matrices kable(head(saved_mgcfa$model_coef)) kable(saved_mgcfa$model_fit) # overall saved_mgcfa$model_overall #> lavaan 0.6-19 ended normally after 35 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        30 #>  #>   Number of observations                           301 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                85.306 #>   Degrees of freedom                                24 #>   P-value (Chi-square)                           0.000  # groups # saved_mgcfa$group_models$model.1 # saved_mgcfa$group_models$model.2  # configural # saved_mgcfa$model_configural  # constraints # saved_mgcfa$invariance_models$model.loadings # saved_mgcfa$invariance_models$model.intercepts # saved_mgcfa$invariance_models$model.residuals"},{"path":"/articles/Package-Tutorial.html","id":"partial-invariance","dir":"Articles","previous_headings":"","what":"Partial invariance","title":"visualizemi Tutorial","text":"Partial invariance occurs parameter estimates across groups . visualizemi includes useful function investigate items non-invariant. use one popular rules invariance - Δ\\DeltaCFI <= .01 - decide loadings equal across groups comparison configural model. use partial_mi() function figure items change model constraint relaxed individually across groups. get table fit indices review favorite invariance rules model saved separately determine partial invariance. case, one parameter speed =~ x9 clearly can improve overall model equal original configural model. keep exploring steps /partial invariance constraints.","code":"# a saved model from mgcfa or any lavaan model saved_partial <- partial_mi(saved_model = saved_mgcfa$invariance_models$model.loadings,                             # dataframe of the original data                             data = HolzingerSwineford1939,                              # model syntax from lavaan                             model = HS.model,                              # group variable column                             group = \"sex\",                             # the equality constraints you have in the model                             group.equal = c(\"loadings\"),                             # which step to test the partial invariance on                             partial_step = \"loadings\") # note that the group.equal and partial_step are not always the same   kable(saved_partial$fit_table) # saved_partial$models$`visual =~ x1` # saved_partial$models$`visual =~ x2` # and so on saved_mgcfa.partial <- mgcfa(model = HS.model,                      # dataset in data frame                       data = HolzingerSwineford1939,                       # grouping variable column                       group = \"sex\",                      # lavaan syntax for group constraints                      group.equal = c(\"loadings\", \"intercepts\", \"residuals\"),                       # any other lavaan cfa arguments                      meanstructure = TRUE,                      group.partial = c(\"speed =~ x9\") )  kable(saved_mgcfa.partial$model_fit)"},{"path":"/articles/Package-Tutorial.html","id":"plotting-mi","dir":"Articles","previous_headings":"","what":"Plotting MI","title":"visualizemi Tutorial","text":"package includes visualization tool measurement invariance. Plots parameter specific, examine speed =~ x9 strength direction invariance.  plots explained length preprint: https://osf.io/9hzfe/ short version: Observed variable information: Intercepts plotted left side dots y-axis Loadings plotted theh slope lines left hand side Residuals plotted geom violin left hand side Latent variable information: LV distribution plotted right hand side LV means represented solid lines group plot combination three smaller plots, included separately can modify ggplot2 like. can clearly see group 1 shallower slope (.e., smaller factor loading) group 2.","code":"# a table of tidy coefficients, use broom::tidy                            # and create \"model\" column if you don't use mgcfa                           # be sure to use the partial model or one with out                            # constraints or this graph will be boring saved_mi_plots <- plot_mi(data_coef = saved_mgcfa.partial$model_coef,                           # which model do you want to plot from model column                           model_step = \"loadings\",                            # name of observed item                           item_name = \"x9\",                            # LV limits to graph                           x_limits = c(-1,1),                            # Y min and max in data                           y_limits = c(min(HolzingerSwineford1939$x9),                                        max(HolzingerSwineford1939$x9)),                            # what ci do you want                           conf.level = .95,                            # what model results do you want                           model_results = saved_mgcfa.partial$invariance_models$model.loadings,                            # which latent is the observed variable on                           # important for cross-loaded variables                           lv_name = \"speed\",                            # if you have more than two groups, which two do you want                           plot_groups = NULL)  saved_mi_plots$complete"},{"path":"/articles/Package-Tutorial.html","id":"pre-registration-replication-and-registered-reports","dir":"Articles","previous_headings":"","what":"Pre-registration, replication, and registered reports","title":"visualizemi Tutorial","text":"Several unanswered questions: big effect? - use dmacsd_{macs}, however statistic based intercepts loadings simultaneously. much expect model replicate? - believe data truly representative population, model replicate comparison random model? information give idea expect potential replication /o pre-registration.","code":""},{"path":"/articles/Package-Tutorial.html","id":"replication-at-model-level","dir":"Articles","previous_headings":"Pre-registration, replication, and registered reports","what":"Replication at model level","title":"visualizemi Tutorial","text":"bootstrap mgcfa procedure determine “replication rate” data representative true population. data bootstrapped steps MGCFA examined invariance. model compared model bootstrapped data random group assignment. data tells proportion values non-invariant bootstrapped random models. Note: may add n_boot sometimes models fail converge. h represents effect size comparison two proportions (much like dd value). can see ’s likely model show invariance parameters compared random model loadings.","code":"saved_boot_model <- bootstrap_model(   # saved configural model to start at   saved_configural = saved_mgcfa$model_configural,   # dataset for the analysis   data = HolzingerSwineford1939,   # model lavaan syntax   model = HS.model,   # group variable in the dataset   group = \"sex\",    # number of bootstraps   # this is set to a low number to compile quickly for cran   nboot = 10,   # name of the fit measure you want to use, make sure it's lavaan   invariance_index = \"cfi\",   # rule for the difference in fit indices   invariance_rule = .01,   # what order of steps do you want to test?    group.equal = c(\"loadings\", \"intercepts\", \"residuals\") ) #> Finished Bootstrap Number: 1 #> Finished Bootstrap Number: 2 #> Finished Bootstrap Number: 3 #> Finished Bootstrap Number: 4 #> Finished Bootstrap Number: 5 #> Finished Bootstrap Number: 6 #> Finished Bootstrap Number: 7 #> Finished Bootstrap Number: 8 #> Finished Bootstrap Number: 9 #> Finished Bootstrap Number: 10  kable(saved_boot_model)"},{"path":"/articles/Package-Tutorial.html","id":"size-of-the-effect-and-replication-at-parameter-level","dir":"Articles","previous_headings":"Pre-registration, replication, and registered reports","what":"Size of the effect and replication at parameter level","title":"visualizemi Tutorial","text":"function, bootstrap model (step claim partial invariance) determine replication rate effect size. Note: function slow depending number parameters, bootstraps, computer size. saved dataframe estimates group’s standardized loading using std.original model random model. value like β\\beta effect size - can use determine effect size difference constrained equal . dataframe included want make graphs. summary dataframe bootstrapped results. Note: see NAs enough values fall “invariant” “non-invariant” separation. Effect sizes calculated calculate_d() assuming subjects grouping (group 1 versus group 2) using average standardized parameter mean average standard deviation parameter standard deviation. minimum 10% bootstraps required effect size calculate. forest plot style graph mean group differences. forest plot style graph effect sizes group differences emphasis number bootstraps included calculation. Note: invariance FALSE non-invariant, TRUE invariant using: (original model fit - model relaxed fit) <= rule last three ggplot objects, can edit saved output.    can see models considered “invariant” individually relaxing parameters. three parameters ones showed top items relax create invariant model doesn’t bootstrap consistently, may replicate. randomly assigned group models show even split replication, expect, given ’s “random”. boot effects dataframe gives potential size non-invariant effect compared random, illuminating items may replicate, boot summary gives effect sizes differences groups bootstrapped random data. subtract differences tell big one might expect compared random simply review invariance plots.","code":"saved_boot_partial <- bootstrap_partial(   # the model you want to test    # use the model before your invariant one    # similar set up to partial_mi   saved_model = saved_mgcfa.partial$model_configural,   # the dataframe   data = HolzingerSwineford1939,   # the original model syntax   model = HS.model,   # the grouping variable column   group = \"sex\",   # run more, but this package vignette needs to knit fast   nboot = 20,   # what index are you using for invariance?   # match this to lavaan's name under fitmeasures()   invariance_index = \"cfi\",   # what rule are you using?   invariance_rule = .01,   # what are we comparing against?    invariance_compare = unname(fitmeasures(saved_mgcfa.partial$model_configural, \"cfi\")),   # which step you want to estimate effect size for   partial_step = c(\"loadings\"),    # which parameters you want to hold constrained   group.equal = c(\"loadings\")   ) #> Finished Bootstrap Number: 1 #> Finished Bootstrap Number: 2 #> Finished Bootstrap Number: 3 #> Finished Bootstrap Number: 4 #> Finished Bootstrap Number: 5 #> Finished Bootstrap Number: 6 #> Finished Bootstrap Number: 7 #> Finished Bootstrap Number: 8 #> Finished Bootstrap Number: 9 #> Finished Bootstrap Number: 10 #> Finished Bootstrap Number: 11 #> Finished Bootstrap Number: 12 #> Finished Bootstrap Number: 13 #> Finished Bootstrap Number: 14 #> Finished Bootstrap Number: 15 #> Finished Bootstrap Number: 16 #> Finished Bootstrap Number: 17 #> Finished Bootstrap Number: 18 #> Finished Bootstrap Number: 19 #> Finished Bootstrap Number: 20  kable(head(saved_boot_partial$boot_DF)) kable(saved_boot_partial$boot_summary) kable(saved_boot_partial$boot_effects) saved_boot_partial$invariance_plot saved_boot_partial$effect_invariance_plot saved_boot_partial$density_plot #> Picking joint bandwidth of NaN #> Picking joint bandwidth of 0.0276 #> Picking joint bandwidth of 0.043 #> Picking joint bandwidth of 0.0344"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Erin M. Buchanan. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Buchanan E (2024). visualizemi: Visualizatons Effect Sizes Multigroup CFA. R package version 0.1.0, http://www.aggieerin.com/visualizemi/.","code":"@Manual{,   title = {visualizemi: Visualizatons and Effect Sizes for Multigroup CFA},   author = {Erin M. Buchanan},   year = {2024},   note = {R package version 0.1.0},   url = {http://www.aggieerin.com/visualizemi/}, }"},{"path":"/index.html","id":"visualizemi","dir":"","previous_headings":"","what":"Visualizatons and Effect Sizes for Multigroup CFA","title":"Visualizatons and Effect Sizes for Multigroup CFA","text":"package multigroup visualization estimation smallest effects pre-registration","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visualizatons and Effect Sizes for Multigroup CFA","text":"","code":"library(devtools) install_packages(\"doomlab/visualizemi\")"},{"path":"/index.html","id":"check-out-the-vignettes","dir":"","previous_headings":"","what":"Check out the vignettes!","title":"Visualizatons and Effect Sizes for Multigroup CFA","text":"’s preprint paper package: https://osf.io/9hzfe/ Check vignettes understand package functions.","code":""},{"path":"/reference/bootstrap_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapping Measurement Invariance — bootstrap_model","title":"Bootstrapping Measurement Invariance — bootstrap_model","text":"function help bootstrap expected rates \"replication\" measurement invariance compared random assignment groups. function mostly designed estimation registered reports can also used model completed estimate rates expected differences future.","code":""},{"path":"/reference/bootstrap_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapping Measurement Invariance — bootstrap_model","text":"","code":"bootstrap_model(   saved_configural,   data,   model,   group,   nboot = 1000,   invariance_index,   invariance_rule,   group.equal,   ... )"},{"path":"/reference/bootstrap_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapping Measurement Invariance — bootstrap_model","text":"saved_configural saved lavaan model \"configural\" model includes grouping variable equality constraints. data dataframe estimation model original model lavaan syntax group grouping variable column character nboot number bootstraps like calculate. Please note: large models many parameters run slowly depending computer. invariance_index name fix index want use invariance testing. example, \"cfi\", \"rmsea\" - must character vector part fitmeasures provided lavaan. invariance_rule difference previous model fit index new equality model index accept invariant. Must numeric value. group.equal equality constraints like impose vector, order. argument lavaan syntax. example, c(\"loadings\", \"intercepts\", \"residuals\"). ... arguments included configure cfa function lavaan. example, can include arguments ordered models, clustering, sampling.weights, estimators. Note: model updated information, mgcfa model, need specify .","code":""},{"path":"/reference/bootstrap_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapping Measurement Invariance — bootstrap_model","text":"dataframe bootstrapped results. set includes proportion invariant tests bootstrapping random results effect size h difference.","code":""},{"path":"/reference/bootstrap_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapping Measurement Invariance — bootstrap_model","text":"","code":"HS.model <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 '  library(lavaan) #> This is lavaan 0.6-19 #> lavaan is FREE software! Please report any bugs.  data(\"HolzingerSwineford1939\")  saved_model <- cfa(HS.model, data = HolzingerSwineford1939,  meanstructure = TRUE,  group = \"sex\",  group.equal = c(\"loadings\"))  saved_configural <- cfa(HS.model, data = HolzingerSwineford1939,  meanstructure = TRUE,  group = \"sex\")  # saved_boot <- bootstrap_model( #  saved_configural = saved_configural, #  data = HolzingerSwineford1939, #  model = HS.model, #  group = \"sex\", #  nboot = 100, # don't do this - this is to make it run fast #  invariance_index = \"cfi\", #  invariance_rule = .01, #  group.equal = c(\"loadings\", \"intercepts\", \"residuals\"))  #  saved_boot"},{"path":"/reference/bootstrap_partial.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapping Partial Invariance — bootstrap_partial","title":"Bootstrapping Partial Invariance — bootstrap_partial","text":"function bootstrap partially invariant multigroup CFA model. function bootstraps model focus freeing one parameter time specific partial invariance model. example, can use function view differences intercepts observed variables two groups. function returns bootstrapped values, summary table, two invariance plots comparing bootstrapped data randomized group assignment.","code":""},{"path":"/reference/bootstrap_partial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapping Partial Invariance — bootstrap_partial","text":"","code":"bootstrap_partial(   saved_model,   data,   model,   group,   nboot = 1000,   invariance_index,   invariance_rule,   invariance_compare,   partial_step,   group.equal,   ... )"},{"path":"/reference/bootstrap_partial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapping Partial Invariance — bootstrap_partial","text":"saved_model saved lavaan model step like estimate partial invariance . data dataframe estimation model original model lavaan syntax group grouping variable column character nboot number bootstraps like calculate. Please note: large models many parameters run slowly depending computer. invariance_index name fix index want use invariance testing. example, \"cfi\", \"rmsea\" - must character vector part fitmeasures provided lavaan. invariance_rule difference previous model fit index new partial model index accept invariant. Must numeric value. invariance_compare comparison fit index judge model invariant. value compared calculated partial invariance models difference calculated compare invariance_rule. partial_step parameter like bootstrap partial invariance . can use \"loadings\", \"regressions\", \"intercepts\", \"residuals\", \"thresholds\". Note models may estimate want (.e., syntax factor covariances ~~ well residuals) can excluded final dataframe. group.equal equality constraints bootstrapping - use parameter case want estimate effect size specific partial step continue hold things constrained ... arguments included configure cfa function lavaan. example, can include arguments ordered models, clustering, sampling.weights, estimators. Note: model updated information, mgcfa model, need specify ","code":""},{"path":"/reference/bootstrap_partial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapping Partial Invariance — bootstrap_partial","text":"set graphs dataframes. invariance_plot ggplot2 object visualizes bootstrapped random estimates difference score groups. separated \"invariant\" \"non-invariant\" models. effect_invariance_plot ggplot2 object visualizes effect sizes differences invariance plot forest plot style. density_plot ggplot2 object visualizes raw data boot_DF comparing groups invariance results. boot_DF dataframe bootstrapped randomized results. boot_summary dataframe summary bootstrapped random results effect sizes. Note: last two dataframes can used recreate visualizations style. boot_effects dataframe summary bootstrapped random results effect sizes replication rates.","code":""},{"path":"/reference/bootstrap_partial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapping Partial Invariance — bootstrap_partial","text":"","code":"library(lavaan) HS.model <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 '  saved_model <- cfa(HS.model, data = HolzingerSwineford1939,  meanstructure = TRUE,  group = \"sex\",  group.equal = c(\"loadings\"))  # not run to save load time # saved_boot <- bootstrapped_partial( #  saved_model = saved_model, #  data = HolzingerSwineford1939, #  model = HS.model, #  group = \"sex\", #  nboot = 100, #  invariance_index = \"cfi\", #  invariance_rule = .01, #  invariance_compare = fitmeasures(saved_model, \"cfi\"), #  partial_step = c(\"loadings\"), #  group.equal = c(\"loadings\"))  # saved_boot$boot_DF # saved_boot$boot_summary # saved_boot$invariance_plot # saved_boot$effect_invariance_plot"},{"path":"/reference/bootstrap_rr.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapping Measurement Invariance — bootstrap_rr","title":"Bootstrapping Measurement Invariance — bootstrap_rr","text":"function help bootstrap expected rates \"replication\" measurement invariance compared random assignment groups. function mostly designed estimation registered reports can also used model completed estimate rates expected differences future.","code":""},{"path":"/reference/bootstrap_rr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapping Measurement Invariance — bootstrap_rr","text":"","code":"bootstrap_rr(   saved_configural,   data,   model,   group,   nboot = 1000,   invariance_index,   invariance_rule,   group.equal )"},{"path":"/reference/bootstrap_rr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapping Measurement Invariance — bootstrap_rr","text":"saved_configural saved lavaan model \"configural\" model includes grouping variable equality constraints. data dataframe estimation model original model lavaan syntax group grouping variable column character nboot number bootstraps like calculate. Please note: large models many parameters run slowly depending computer. invariance_index name fix index want use invariance testing. example, \"cfi\", \"rmsea\" - must character vector part fitmeasures provided lavaan. invariance_rule difference previous model fit index new equality model index accept invariant. Must numeric value. group.equal equality constraints like impose vector, order. argument lavaan syntax. example, c(\"loadings\", \"intercepts\", \"residuals\").","code":""},{"path":"/reference/bootstrap_rr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapping Measurement Invariance — bootstrap_rr","text":"dataframe bootstrapped results. set includes proportion invariant tests bootstrapping random results effect size h difference.","code":""},{"path":"/reference/bootstrap_rr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapping Measurement Invariance — bootstrap_rr","text":"","code":"HS.model <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 '  library(lavaan)  data(\"HolzingerSwineford1939\")  saved_model <- cfa(HS.model, data = HolzingerSwineford1939,  meanstructure = TRUE,  group = \"sex\",  group.equal = c(\"loadings\"))  saved_configural <- cfa(HS.model, data = HolzingerSwineford1939,  meanstructure = TRUE,  group = \"sex\")  # saved_boot <- bootstrap_rr( #  saved_configural = saved_configural, #  data = HolzingerSwineford1939, #  model = HS.model, #  group = \"sex\", #  nboot = 100, # don't do this - this is to make it run fast #  invariance_index = \"cfi\", #  invariance_rule = .01, #  group.equal = c(\"loadings\", \"intercepts\", \"residuals\"))  #  saved_boot"},{"path":"/reference/bootstrapped_partial.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapping Partial Invariance — bootstrapped_partial","title":"Bootstrapping Partial Invariance — bootstrapped_partial","text":"function bootstrap partially invariant multigroup CFA model. function bootstraps model focus freeing one parameter time specific partial invariance model. example, can use function view differences intercepts observed variables two groups. function returns bootstrapped values, summary table, two invariance plots comparing bootstrapped data randomized group assignment.","code":""},{"path":"/reference/bootstrapped_partial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapping Partial Invariance — bootstrapped_partial","text":"","code":"bootstrapped_partial(   saved_model,   data,   model,   group,   nboot = 1000,   invariance_index,   invariance_rule,   invariance_compare,   partial_step,   group.equal )"},{"path":"/reference/bootstrapped_partial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapping Partial Invariance — bootstrapped_partial","text":"saved_model saved lavaan model step like estimate partial invariance . data dataframe estimation model original model lavaan syntax group grouping variable column character nboot number bootstraps like calculate. Please note: large models many parameters run slowly depending computer. invariance_index name fix index want use invariance testing. example, \"cfi\", \"rmsea\" - must character vector part fitmeasures provided lavaan. invariance_rule difference previous model fit index new partial model index accept invariant. Must numeric value. invariance_compare comparison fit index judge model invariant. value compared calculated partial invariance models difference calculated compare invariance_rule. partial_step parameter like bootstrap partial invariance . can use \"loadings\", \"regressions\", \"intercepts\", \"residuals\", \"thresholds\". Note models may estimate want (.e., syntax factor covariances ~~ well residuals) can excluded final dataframe. group.equal equality constraints bootstrapping - use parameter case want estimate effect size specific partial step continue hold things constrained","code":""},{"path":"/reference/bootstrapped_partial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapping Partial Invariance — bootstrapped_partial","text":"set graphs dataframes. invariance_plot ggplot2 object visualizes bootstrapped random estimates difference score groups. separated \"invariant\" \"non-invariant\" models. effect_invariance_plot ggplot2 object visualizes effect sizes differences invariance plot forest plot style. density_plot ggplot2 object visualizes raw data boot_DF comparing groups invariance results. boot_DF dataframe bootstrapped randomized results. boot_summary dataframe summary bootstrapped random results effect sizes. Note: last two dataframes can used recreate visualizations style. boot_effects dataframe summary bootstrapped random results effect sizes replication rates.","code":""},{"path":"/reference/bootstrapped_partial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapping Partial Invariance — bootstrapped_partial","text":"","code":"library(lavaan) HS.model <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 '  saved_model <- cfa(HS.model, data = HolzingerSwineford1939,  meanstructure = TRUE,  group = \"sex\",  group.equal = c(\"loadings\"))  # not run to save load time # saved_boot <- bootstrapped_partial( #  saved_model = saved_model, #  data = HolzingerSwineford1939, #  model = HS.model, #  group = \"sex\", #  nboot = 100, #  invariance_index = \"cfi\", #  invariance_rule = .01, #  invariance_compare = fitmeasures(saved_model, \"cfi\"), #  partial_step = c(\"loadings\"), #  group.equal = c(\"loadings\"))  # saved_boot$boot_DF # saved_boot$boot_summary # saved_boot$invariance_plot # saved_boot$effect_invariance_plot"},{"path":"/reference/calculate_d.html","id":null,"dir":"Reference","previous_headings":"","what":"\\(d_s\\) for Between Subjects with Pooled SD Denominator — calculate_d","title":"\\(d_s\\) for Between Subjects with Pooled SD Denominator — calculate_d","text":"function displays d two subjects groups gives central non-central confidence interval using pooled standard deviation denominator. Taken MOTE package. Use MOTE full options.","code":""},{"path":"/reference/calculate_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\\(d_s\\) for Between Subjects with Pooled SD Denominator — calculate_d","text":"","code":"calculate_d(   m1 = NULL,   m2 = NULL,   sd1 = NULL,   sd2 = NULL,   n1 = NULL,   n2 = NULL,   a = 0.05 )"},{"path":"/reference/calculate_d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\\(d_s\\) for Between Subjects with Pooled SD Denominator — calculate_d","text":"m1 mean group one m2 mean group two sd1 standard deviation group one sd2 standard deviation group two n1 sample size group one n2 sample size group two significance level","code":""},{"path":"/reference/calculate_d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\\(d_s\\) for Between Subjects with Pooled SD Denominator — calculate_d","text":"Provides effect size (Cohen's *d*) associated central non-central confidence intervals, *t*-statistic, confidence intervals associated means group, well standard deviations standard errors means group. one-tailed confidence interval also included sensitivity analyses. d effect size dlow lower level confidence interval d value dhigh upper level confidence interval d value","code":""},{"path":"/reference/calculate_d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\\(d_s\\) for Between Subjects with Pooled SD Denominator — calculate_d","text":"calculate \\(d_s\\), mean two subtracted mean one divided pooled standard deviation. $$d_s = \\frac{M_1 - M_2}{S_{pooled}}$$","code":""},{"path":"/reference/calculate_d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\\(d_s\\) for Between Subjects with Pooled SD Denominator — calculate_d","text":"","code":"calculate_d(m1 = 4, m2 = 3, sd1 = 1, sd2 = 1, n1 = 100, n2 = 100, a = .05) #> $d #> [1] 1 #>  #> $dlow #> [1] 0.7047339 #>  #> $dhigh #> [1] 1.293011 #>"},{"path":"/reference/mgcfa.html","id":null,"dir":"Reference","previous_headings":"","what":"Multigroup Confirmatory Factor Analysis — mgcfa","title":"Multigroup Confirmatory Factor Analysis — mgcfa","text":"function calculate multigroup confirmatory factor analysis given list model constraints. Returns models using lavaan package tidy dataframes relevant information.","code":""},{"path":"/reference/mgcfa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multigroup Confirmatory Factor Analysis — mgcfa","text":"","code":"mgcfa(   model,   data = NULL,   sample.cov = NULL,   sample.mean = NULL,   sample.nobs = NULL,   group = NULL,   group.equal,   group.partial = NULL,   conf.level = conf.level,   ... )"},{"path":"/reference/mgcfa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multigroup Confirmatory Factor Analysis — mgcfa","text":"model character string representing overall model formatted lavaan syntax data dataframe includes grouping variable multigroup analysis. Define data group sample.cov, sample.mean, sample.nobs. sample.cov sample variance-covariance matrix includes row /column names match observed variables model. multigroup analyses, need format data list variance-covariance matrices names group. sample.mean mean vector observed variables. multigroup analyses, need format data list names group. assumed order sample.cov. sample.nobs Number observations group. multigroup analyses, need format data list names group. assumed order sample.cov. group character name group column included data argument. group.equal vector names constraints test multigroup analysis, order tested. See lavaan possible options. group.partial vector constraints relax partial group models. conf.level confidence interval model coefficients. ... arguments included configure cfa function lavaan. example, can include arguments ordered models, clustering, sampling.weights, estimators.","code":""},{"path":"/reference/mgcfa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multigroup Confirmatory Factor Analysis — mgcfa","text":"list outputs multigroup procedure. model_coef tidy dataframe model coefficients model_fit tidy dataframe model fit indices model.overall dataframe provided, overall CFA model groups combined included model.GROUPS individual group models model.configural configural model puts together groups model constraints model.CONSTRAINTS model constraints provided group.equal converted models increasing equality constraints","code":""},{"path":"/reference/mgcfa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multigroup Confirmatory Factor Analysis — mgcfa","text":"","code":"HS.model <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 '  library(lavaan)  data(\"HolzingerSwineford1939\")  saved_mgcfa <- mgcfa(model = HS.model,  data = HolzingerSwineford1939,  group = \"sex\",  group.equal = c(\"loadings\", \"intercepts\", \"residuals\"),  meanstructure = TRUE)"},{"path":"/reference/partial_mi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of Partial Invariance by Parameter — partial_mi","title":"Calculation of Partial Invariance by Parameter — partial_mi","text":"function iterates constrained model examines potential areas partial invariance. function returns list models dataframe user can decide items may relaxed partial invariance.","code":""},{"path":"/reference/partial_mi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of Partial Invariance by Parameter — partial_mi","text":"","code":"partial_mi(saved_model, data, model, group, group.equal, partial_step, ...)"},{"path":"/reference/partial_mi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of Partial Invariance by Parameter — partial_mi","text":"saved_model lavaan model least one level constraints across groups. data Dataframe original saved model. model Model original saved model. group Grouping variable column original saved model. Use character vector. group.equal vector names constraints test multigroup analysis, order tested. See lavaan possible options. partial_step level partial invariance like test. can use \"loadings\", \"regressions\", \"intercepts\", \"residuals\", \"thresholds\". Note models may estimate want (.e., syntax factor covariances ~~ well residuals) can excluded final dataframe. ... lavaan arguments like add.","code":""},{"path":"/reference/partial_mi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of Partial Invariance by Parameter — partial_mi","text":"Models constraint relaxed individually summary table fit indices model. models Saved lavaan models parameter relaxed. fit_table dataframe fit indices models investigate places partial invariance.","code":""},{"path":"/reference/partial_mi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of Partial Invariance by Parameter — partial_mi","text":"","code":"HS.model <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 '  library(lavaan)  data(\"HolzingerSwineford1939\")  saved_mgcfa <- mgcfa(model = HS.model,  data = HolzingerSwineford1939,  group = \"sex\",  group.equal = c(\"loadings\", \"intercepts\", \"residuals\"),  meanstructure = TRUE)  saved_mi <- partial_mi(saved_model =   saved_mgcfa$invariance_models$model.loadings,   data = HolzingerSwineford1939,   model = HS.model,   group = \"sex\",   group.equal = \"loadings\",   partial_step = \"loadings\")    saved_mi$fit_table #> # A tibble: 9 × 47 #>   free.parameter npar       fmin      chisq    df    pvalue       baseline.chisq #>   <chr>          <lvn.vctr> <lvn.vct> <lvn.vc> <lvn> <lvn.vctr>   <lvn.vctr>     #> 1 visual =~ x1   54         0.2096778 126.2260 54    1.025522e-07 967.2277       #> 2 visual =~ x2   55         0.2079012 125.1565 53    9.021992e-08 967.2277       #> 3 visual =~ x3   55         0.2046712 123.2120 53    1.616199e-07 967.2277       #> 4 textual =~ x4  54         0.2096778 126.2260 54    1.025522e-07 967.2277       #> 5 textual =~ x5  55         0.2087596 125.6733 53    7.719583e-08 967.2277       #> 6 textual =~ x6  55         0.2094712 126.1017 53    6.781510e-08 967.2277       #> 7 speed =~ x7    54         0.2096778 126.2260 54    1.025522e-07 967.2277       #> 8 speed =~ x8    55         0.1956719 117.7945 53    7.944429e-07 967.2277       #> 9 speed =~ x9    55         0.1829277 110.1225 53    6.944395e-06 967.2277       #> # ℹ 40 more variables: baseline.df <lvn.vctr>, baseline.pvalue <lvn.vctr>, #> #   cfi <lvn.vctr>, tli <lvn.vctr>, nnfi <lvn.vctr>, rfi <lvn.vctr>, #> #   nfi <lvn.vctr>, pnfi <lvn.vctr>, ifi <lvn.vctr>, rni <lvn.vctr>, #> #   logl <lvn.vctr>, unrestricted.logl <lvn.vctr>, aic <lvn.vctr>, #> #   bic <lvn.vctr>, ntotal <lvn.vctr>, bic2 <lvn.vctr>, rmsea <lvn.vctr>, #> #   rmsea.ci.lower <lvn.vctr>, rmsea.ci.upper <lvn.vctr>, #> #   rmsea.ci.level <lvn.vctr>, rmsea.pvalue <lvn.vctr>, …   saved_mi$models #> $`visual =~ x1` #> lavaan 0.6-19 ended normally after 47 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        60 #>   Number of equality constraints                     6 #>  #>   Number of observations per group:                    #>     1                                              146 #>     2                                              155 #>  #> Model Test User Model: #>                                                        #>   Test statistic                               126.226 #>   Degrees of freedom                                54 #>   P-value (Chi-square)                           0.000 #>   Test statistic for each group: #>     1                                           72.534 #>     2                                           53.692 #>  #> $`visual =~ x2` #> lavaan 0.6-19 ended normally after 49 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        60 #>   Number of equality constraints                     5 #>  #>   Number of observations per group:                    #>     1                                              146 #>     2                                              155 #>  #> Model Test User Model: #>                                                        #>   Test statistic                               125.157 #>   Degrees of freedom                                53 #>   P-value (Chi-square)                           0.000 #>   Test statistic for each group: #>     1                                           71.454 #>     2                                           53.702 #>  #> $`visual =~ x3` #> lavaan 0.6-19 ended normally after 54 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        60 #>   Number of equality constraints                     5 #>  #>   Number of observations per group:                    #>     1                                              146 #>     2                                              155 #>  #> Model Test User Model: #>                                                        #>   Test statistic                               123.212 #>   Degrees of freedom                                53 #>   P-value (Chi-square)                           0.000 #>   Test statistic for each group: #>     1                                           71.369 #>     2                                           51.843 #>  #> $`textual =~ x4` #> lavaan 0.6-19 ended normally after 47 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        60 #>   Number of equality constraints                     6 #>  #>   Number of observations per group:                    #>     1                                              146 #>     2                                              155 #>  #> Model Test User Model: #>                                                        #>   Test statistic                               126.226 #>   Degrees of freedom                                54 #>   P-value (Chi-square)                           0.000 #>   Test statistic for each group: #>     1                                           72.534 #>     2                                           53.692 #>  #> $`textual =~ x5` #> lavaan 0.6-19 ended normally after 47 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        60 #>   Number of equality constraints                     5 #>  #>   Number of observations per group:                    #>     1                                              146 #>     2                                              155 #>  #> Model Test User Model: #>                                                        #>   Test statistic                               125.673 #>   Degrees of freedom                                53 #>   P-value (Chi-square)                           0.000 #>   Test statistic for each group: #>     1                                           72.201 #>     2                                           53.472 #>  #> $`textual =~ x6` #> lavaan 0.6-19 ended normally after 49 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        60 #>   Number of equality constraints                     5 #>  #>   Number of observations per group:                    #>     1                                              146 #>     2                                              155 #>  #> Model Test User Model: #>                                                        #>   Test statistic                               126.102 #>   Degrees of freedom                                53 #>   P-value (Chi-square)                           0.000 #>   Test statistic for each group: #>     1                                           72.455 #>     2                                           53.647 #>  #> $`speed =~ x7` #> lavaan 0.6-19 ended normally after 47 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        60 #>   Number of equality constraints                     6 #>  #>   Number of observations per group:                    #>     1                                              146 #>     2                                              155 #>  #> Model Test User Model: #>                                                        #>   Test statistic                               126.226 #>   Degrees of freedom                                54 #>   P-value (Chi-square)                           0.000 #>   Test statistic for each group: #>     1                                           72.534 #>     2                                           53.692 #>  #> $`speed =~ x8` #> lavaan 0.6-19 ended normally after 48 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        60 #>   Number of equality constraints                     5 #>  #>   Number of observations per group:                    #>     1                                              146 #>     2                                              155 #>  #> Model Test User Model: #>                                                        #>   Test statistic                               117.794 #>   Degrees of freedom                                53 #>   P-value (Chi-square)                           0.000 #>   Test statistic for each group: #>     1                                           67.657 #>     2                                           50.138 #>  #> $`speed =~ x9` #> lavaan 0.6-19 ended normally after 49 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        60 #>   Number of equality constraints                     5 #>  #>   Number of observations per group:                    #>     1                                              146 #>     2                                              155 #>  #> Model Test User Model: #>                                                        #>   Test statistic                               110.122 #>   Degrees of freedom                                53 #>   P-value (Chi-square)                           0.000 #>   Test statistic for each group: #>     1                                           63.775 #>     2                                           46.347 #>"},{"path":"/reference/plot_mi.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualization for Measurement Invariance — plot_mi","title":"Visualization for Measurement Invariance — plot_mi","text":"function create visualizations measurement invariance comparison two groups. Please note: function graphs two groups time - use function several times two groups.","code":""},{"path":"/reference/plot_mi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualization for Measurement Invariance — plot_mi","text":"","code":"plot_mi(   data_coef,   model_step,   item_name,   x_limits = c(-1, 1),   y_limits,   conf.level = 0.95,   model_results,   lv_name,   plot_groups = NULL )"},{"path":"/reference/plot_mi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualization for Measurement Invariance — plot_mi","text":"data_coef tidy dataframe coefficients mgcfa function package. model_step model step like plot using function. Check \"Model\" column coefficients pick. Include character vector. item_name name item/variable want plot comparison. Check \"term\" column know options. Usually observed variables model. x_limits limits latent variable plot latent mean graph. y_limits limits observed variable included item_name. conf.level confidence interval level like graph. model_results saved summary cfa mgcfa model name listed model_step. lv_name name latent variable like plot. Ensure name data_coef. plot_groups optional variable denote two groups like plot. Used two groups included output.","code":""},{"path":"/reference/plot_mi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualization for Measurement Invariance — plot_mi","text":"list graphs created visualize measurement invariance. complete ggplot2 object includes visualization stacked together publication. intercept ggplot2 object includes intercept section overall graph. mean ggplot2 object includes latent means section overall graph. variance ggplot2 object includes variance/residuals section overall graph.","code":""},{"path":"/reference/plot_mi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualization for Measurement Invariance — plot_mi","text":"","code":"HS.model <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 '  library(lavaan)  data(\"HolzingerSwineford1939\")  saved_model <- cfa(HS.model, data = HolzingerSwineford1939,  meanstructure = TRUE,  group = \"sex\",  group.equal = c(\"loadings\"))   saved_mgcfa <- mgcfa(model = HS.model,   data = HolzingerSwineford1939,   group = \"sex\",   group.equal = c(\"loadings\", \"intercepts\", \"residuals\"),   meanstructure = TRUE)  # saved_mi_plots <- plot_mi(data_coef = saved_mgcfa$model_coef, #  model_step = \"Configural\", # which model #  item_name = \"x1\", # name of observed item #  x_limits = c(-1,1), # LV limits to graph #  y_limits = c(min(HolzingerSwineford1939$x1), #             max(HolzingerSwineford1939$x1)), # Y min and max in data #  conf.level = .95, # what ci do you want #  model_results = saved_mgcfa$model_configural, # what model results do you want #  lv_name = \"visual\", # which latent is the observed variable on #  plot_groups = NULL)"}]
